import { useState } from 'react';
import axios from 'axios';
import { Shield, Mail, Download, Terminal, AlertTriangle, Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { FileUpload } from '@/components/FileUpload';
import { ScanResults } from '@/components/ScanResults';
import { useToast } from '@/hooks/use-toast';

// Define the structure of the scan results for type safety
interface AnalysisResults {
  success: boolean;
  message: string;
  hashes: {
    md5: string;
    sha256: string;
    sha512: string;
  };
  results: {
    malicious: number;
    suspicious: number;
    undetected: number;
    harmless: number;
    timeout: number;
  };
  report_url: string;
  email_status: {
    sent: boolean | null;
    error: string | null;
  };
}

export const MalwareAnalysis = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [email, setEmail] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [scanStep, setScanStep] = useState('');
  const [scanResults, setScanResults] = useState<AnalysisResults | null>(null);
  const { toast } = useToast();

  // Define the backend URL
  const API_URL = "http://127.0.0.1:5000";

  const handleFileSelect = (file: File) => {
    setSelectedFile(file);
    setScanResults(null); // Reset results when a new file is selected
  };

  const handleRemoveFile = () => {
    setSelectedFile(null);
    setScanResults(null);
  };

  const handleScan = async () => {
    if (!selectedFile) {
      toast({
        title: "No file selected",
        description: "Please select a file to analyze",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setScanResults(null);
    setScanStep('Uploading and analyzing file...');
    setScanProgress(50); // Set a generic progress while waiting

    // Use FormData to send the file and email to the backend
    const formData = new FormData();
    formData.append('file', selectedFile);
    if (email) {
      formData.append('email', email);
    }

    try {
      // Make the API call to the Flask backend
      const response = await axios.post<AnalysisResults>(`${API_URL}/scan`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      setScanStep('Finalizing report...');
      setScanProgress(100);
      setScanResults(response.data);
      toast({
        title: "Scan Completed",
        description: response.data.message || "File analysis has been completed successfully.",
      });

      // Check the email status from the backend response and show a toast
      const { email_status } = response.data;
      if (email_status.sent === true) {
        toast({
            title: "Report Emailed",
            description: `Analysis report sent to ${email}.`,
        });
      } else if (email_status.sent === false) {
        toast({
            title: "Email Failed to Send",
            description: `Could not send report. Reason: ${email_status.error}`,
            variant: "destructive",
            duration: 9000,
        });
      }

    } catch (error: any) {
      // Handle errors from the backend or network issues
      console.error("Scan failed:", error);
      const errorMessage = error.response?.data?.error || "An unknown error occurred. Make sure the backend server is running.";
      toast({
        title: "Scan Failed",
        description: errorMessage,
        variant: "destructive",
      });
      setScanResults(null);
    } finally {
      setIsScanning(false);
      setScanProgress(0);
      setScanStep('');
    }
  };

  const handleGenerateReport = () => {
    if (scanResults?.report_url) {
      // Create a full URL to the backend report
      const reportUrl = `${API_URL}${scanResults.report_url}`;
      window.open(reportUrl, '_blank');
      toast({
        title: "Report Downloading",
        description: "Your analysis report has started downloading.",
      });
    } else {
      toast({
        title: "Download Failed",
        description: "Report URL is not available.",
        variant: "destructive",
      });
    }
  };

  // The "Email Report" button is no longer needed since it's handled during the scan.
  // We will hide it to avoid confusion.

  // Transform the results to match the props expected by ScanResults component
  const transformedResults = scanResults ? {
    malicious: scanResults.results.malicious || 0,
    suspicious: scanResults.results.suspicious || 0,
    // Combine harmless and undetected for the 'clean' count
    clean: (scanResults.results.harmless || 0) + (scanResults.results.undetected || 0),
    // Calculate the total
    total: (
      (scanResults.results.malicious || 0) +
      (scanResults.results.suspicious || 0) +
      (scanResults.results.harmless || 0) +
      (scanResults.results.undetected || 0) +
      (scanResults.results.timeout || 0)
    ),
    // Add the hashes to the same object
    md5: scanResults.hashes.md5,
    sha256: scanResults.hashes.sha256,
    sha512: scanResults.hashes.sha512,
  } : null;

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-10">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center space-x-3">
            <Shield className="h-8 w-8 text-primary" />
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-cyber-blue bg-clip-text text-transparent">
                FileGuard Scanner
              </h1>
              <p className="text-muted-foreground">Advanced Malware Detection & Analysis</p>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        <div className="grid lg:grid-cols-2 gap-8">
          {/* Left Column - Upload & Controls */}
          <div className="space-y-6">
            {/* File Upload */}
            <div>
              <h2 className="text-xl font-semibold mb-4 flex items-center space-x-2">
                <Terminal className="h-5 w-5" />
                <span>File Analysis</span>
              </h2>
              <FileUpload
                onFileSelect={handleFileSelect}
                selectedFile={selectedFile}
                onRemoveFile={handleRemoveFile}
              />
            </div>

            {/* Email Input */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Mail className="h-5 w-5" />
                  <span>Email Report (Optional)</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <Label htmlFor="email">Recipient Email</Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="user@company.com"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="bg-input border-border"
                    disabled={isScanning}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Action Buttons */}
            <div className="space-y-4">
              <Button
                onClick={handleScan}
                disabled={!selectedFile || isScanning}
                className="w-full bg-primary hover:bg-primary/90 text-primary-foreground"
                size="lg"
              >
                {isScanning ? (
                    <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Scanning...
                    </>
                ) : 'Start Analysis'}
              </Button>

              {scanResults && (
                <div className="grid grid-cols-1 gap-3">
                  <Button
                    onClick={handleGenerateReport}
                    variant="outline"
                    className="border-primary/20 hover:bg-primary/10"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download Report
                  </Button>
                </div>
              )}
            </div>

            {/* Warning Notice */}
            <Card className="border-accent/20 bg-accent/5">
              <CardContent className="p-4">
                <div className="flex items-start space-x-3">
                  <AlertTriangle className="h-5 w-5 text-accent mt-0.5" />
                  <div className="text-sm">
                    <p className="font-medium text-accent mb-1">Security Notice</p>
                    <p className="text-muted-foreground">
                      Files are analyzed using multiple antivirus engines. 
                      Suspicious files will be quarantined automatically.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Right Column - Results */}
          <div>
            <h2 className="text-xl font-semibold mb-4 flex items-center space-x-2">
              <Shield className="h-5 w-5" />
              <span>Analysis Results</span>
            </h2>
            
            {!selectedFile && !scanResults && !isScanning && (
              <Card className="border-dashed border-border/50">
                <CardContent className="p-8 text-center">
                  <Shield className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
                  <h3 className="text-lg font-medium text-muted-foreground mb-2">
                    Ready for Analysis
                  </h3>
                  <p className="text-sm text-muted-foreground">
                    Upload a file to begin security analysis
                  </p>
                </CardContent>
              </Card>
            )}

            <ScanResults 
              results={transformedResults}
              isScanning={isScanning}
              scanProgress={scanProgress}
              scanStep={scanStep}
            />
          </div>
        </div>
      </div>
    </div>
  );
};
